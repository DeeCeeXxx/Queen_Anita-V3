"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  Minimal: () => Minimal,
  Panorama: () => Panorama
});
module.exports = __toCommonJS(src_exports);

// src/themes/minimal.ts
var import_canvas2 = require("@napi-rs/canvas");
var import_cropify = require("cropify");

// src/functions/registerFont.ts
var import_canvas = require("@napi-rs/canvas");
var import_path = __toESM(require("path"));
var import_fs = __toESM(require("fs"));
function registerFont(fontPath, fontName) {
  const rootFontsPath = import_path.default.join(__dirname, "../fonts", fontPath);
  if (import_fs.default.existsSync(rootFontsPath)) {
    import_canvas.GlobalFonts.registerFromPath(rootFontsPath, fontName);
  } else {
    const srcFontsPath = import_path.default.join(__dirname, "../fonts", fontPath);
    if (import_fs.default.existsSync(srcFontsPath)) {
      import_canvas.GlobalFonts.registerFromPath(srcFontsPath, fontName);
    } else {
      throw new Error(`Font file not found at ${rootFontsPath} or ${srcFontsPath}`);
    }
  }
}

// src/themes/minimal.ts
registerFont("PlusJakartaSans-Bold.ttf", "bold");
registerFont("PlusJakartaSans-ExtraBold.ttf", "extrabold");
registerFont("PlusJakartaSans-ExtraLight.ttf", "extralight");
registerFont("PlusJakartaSans-Light.ttf", "light");
registerFont("PlusJakartaSans-Medium.ttf", "medium");
registerFont("PlusJakartaSans-Regular.ttf", "regular");
registerFont("PlusJakartaSans-SemiBold.ttf", "semibold");
var Minimal = async (option) => {
  if (!option.backgroundImage) {
    option.backgroundImage = "https://ik.imagekit.io/unburn/greetify-default.png";
  }
  if (!option.name)
    throw new Error("Invalid parameters: missing name paramter");
  if (!option.nameColor)
    option.nameColor = "#00FF9E";
  if (!option.message)
    throw new Error("Invalid parameters: missing message paramter");
  if (!option.messageColor)
    option.messageColor = "#FFFFFF";
  if (!option.type)
    option.type = "WELCOME";
  if (!option.typeColor)
    option.typeColor = "#FFFFFF";
  if (!option.circleBorder)
    option.circleBorder = false;
  if (option.name.length > 13) {
    option.name = option.name.slice(0, 13) + "..";
  }
  if (option.type.length > 22) {
    option.type = option.type.slice(0, 22) + "..";
  }
  if (option.message.length > 30) {
    option.message = option.message.slice(0, 30) + "..";
  }
  const canvas = (0, import_canvas2.createCanvas)(1280, 720);
  const ctx = canvas.getContext("2d");
  const centerX = 1280 / 2;
  const background = await (0, import_cropify.cropImage)({
    imagePath: option.backgroundImage,
    borderRadius: 100,
    cropCenter: true,
    width: 1280,
    height: 720
  });
  ctx.drawImage(await (0, import_canvas2.loadImage)(background), 0, 0);
  const avatar = await (0, import_cropify.cropImage)({
    imagePath: option.avatar,
    circle: option.circleBorder ? true : false,
    borderRadius: 100,
    cropCenter: true,
    width: 270,
    height: 270
  });
  ctx.drawImage(await (0, import_canvas2.loadImage)(avatar), 505, 56);
  ctx.fillStyle = option.nameColor;
  ctx.font = "100px extrabold";
  ctx.textAlign = "center";
  ctx.fillText(option.name.toUpperCase(), centerX, 440);
  ctx.fillStyle = option.typeColor;
  ctx.font = "65px bold";
  ctx.textAlign = "center";
  ctx.fillText(option.type.toUpperCase(), centerX, 530);
  ctx.fillStyle = option.messageColor;
  ctx.font = "40px light";
  ctx.textAlign = "center";
  ctx.fillText(option.message.toUpperCase(), centerX, 655);
  return canvas.toBuffer("image/png");
};

// src/themes/panorama.ts
var import_canvas3 = require("@napi-rs/canvas");
var import_cropify2 = require("cropify");
registerFont("PlusJakartaSans-Bold.ttf", "bold");
registerFont("PlusJakartaSans-ExtraBold.ttf", "extrabold");
registerFont("PlusJakartaSans-ExtraLight.ttf", "extralight");
registerFont("PlusJakartaSans-Light.ttf", "light");
registerFont("PlusJakartaSans-Medium.ttf", "medium");
registerFont("PlusJakartaSans-Regular.ttf", "regular");
registerFont("PlusJakartaSans-SemiBold.ttf", "semibold");
var Panorama = async (option) => {
  if (!option.backgroundImage) {
    option.backgroundImage = "https://ik.imagekit.io/unburn/greetify-default.png";
  }
  if (!option.name)
    throw new Error("Invalid parameters: missing name paramter");
  if (!option.nameColor)
    option.nameColor = "#00FF9E";
  if (!option.type)
    option.type = "WELCOME";
  if (!option.typeColor)
    option.typeColor = "#FFFFFF";
  if (!option.circleBorder)
    option.circleBorder = false;
  if (option.name.length > 13) {
    option.name = option.name.slice(0, 13) + "..";
  }
  if (option.type.length > 15) {
    option.type = option.type.slice(0, 15) + "..";
  }
  const canvas = (0, import_canvas3.createCanvas)(1280, 410);
  const ctx = canvas.getContext("2d");
  const background = await (0, import_cropify2.cropImage)({
    imagePath: option.backgroundImage,
    borderRadius: 100,
    cropCenter: true,
    width: 1280,
    height: 410
  });
  ctx.drawImage(await (0, import_canvas3.loadImage)(background), 0, 0);
  const avatar = await (0, import_cropify2.cropImage)({
    imagePath: option.avatar,
    borderRadius: 100,
    circle: option.circleBorder ? true : false,
    cropCenter: true,
    width: 290,
    height: 290
  });
  const centerY = 410 / 2;
  ctx.drawImage(await (0, import_canvas3.loadImage)(avatar), 90, 60);
  ctx.fillStyle = option.nameColor;
  ctx.font = "80px extrabold";
  ctx.fillText(option.name.toUpperCase(), 420, centerY + 75);
  ctx.fillStyle = option.typeColor;
  ctx.font = "65px light";
  ctx.fillText(option.type.toUpperCase(), 420, centerY - 25);
  return canvas.toBuffer("image/png");
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Minimal,
  Panorama
});
