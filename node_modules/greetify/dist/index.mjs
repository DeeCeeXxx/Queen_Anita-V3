// node_modules/tsup/assets/esm_shims.js
import { fileURLToPath } from "url";
import path from "path";
var getFilename = () => fileURLToPath(import.meta.url);
var getDirname = () => path.dirname(getFilename());
var __dirname = /* @__PURE__ */ getDirname();

// src/themes/minimal.ts
import { createCanvas, loadImage } from "@napi-rs/canvas";
import { cropImage } from "cropify";

// src/functions/registerFont.ts
import { GlobalFonts } from "@napi-rs/canvas";
import path2 from "path";
import fs from "fs";
function registerFont(fontPath, fontName) {
  const rootFontsPath = path2.join(__dirname, "../fonts", fontPath);
  if (fs.existsSync(rootFontsPath)) {
    GlobalFonts.registerFromPath(rootFontsPath, fontName);
  } else {
    const srcFontsPath = path2.join(__dirname, "../fonts", fontPath);
    if (fs.existsSync(srcFontsPath)) {
      GlobalFonts.registerFromPath(srcFontsPath, fontName);
    } else {
      throw new Error(`Font file not found at ${rootFontsPath} or ${srcFontsPath}`);
    }
  }
}

// src/themes/minimal.ts
registerFont("PlusJakartaSans-Bold.ttf", "bold");
registerFont("PlusJakartaSans-ExtraBold.ttf", "extrabold");
registerFont("PlusJakartaSans-ExtraLight.ttf", "extralight");
registerFont("PlusJakartaSans-Light.ttf", "light");
registerFont("PlusJakartaSans-Medium.ttf", "medium");
registerFont("PlusJakartaSans-Regular.ttf", "regular");
registerFont("PlusJakartaSans-SemiBold.ttf", "semibold");
var Minimal = async (option) => {
  if (!option.backgroundImage) {
    option.backgroundImage = "https://ik.imagekit.io/unburn/greetify-default.png";
  }
  if (!option.name)
    throw new Error("Invalid parameters: missing name paramter");
  if (!option.nameColor)
    option.nameColor = "#00FF9E";
  if (!option.message)
    throw new Error("Invalid parameters: missing message paramter");
  if (!option.messageColor)
    option.messageColor = "#FFFFFF";
  if (!option.type)
    option.type = "WELCOME";
  if (!option.typeColor)
    option.typeColor = "#FFFFFF";
  if (!option.circleBorder)
    option.circleBorder = false;
  if (option.name.length > 13) {
    option.name = option.name.slice(0, 13) + "..";
  }
  if (option.type.length > 22) {
    option.type = option.type.slice(0, 22) + "..";
  }
  if (option.message.length > 30) {
    option.message = option.message.slice(0, 30) + "..";
  }
  const canvas = createCanvas(1280, 720);
  const ctx = canvas.getContext("2d");
  const centerX = 1280 / 2;
  const background = await cropImage({
    imagePath: option.backgroundImage,
    borderRadius: 100,
    cropCenter: true,
    width: 1280,
    height: 720
  });
  ctx.drawImage(await loadImage(background), 0, 0);
  const avatar = await cropImage({
    imagePath: option.avatar,
    circle: option.circleBorder ? true : false,
    borderRadius: 100,
    cropCenter: true,
    width: 270,
    height: 270
  });
  ctx.drawImage(await loadImage(avatar), 505, 56);
  ctx.fillStyle = option.nameColor;
  ctx.font = "100px extrabold";
  ctx.textAlign = "center";
  ctx.fillText(option.name.toUpperCase(), centerX, 440);
  ctx.fillStyle = option.typeColor;
  ctx.font = "65px bold";
  ctx.textAlign = "center";
  ctx.fillText(option.type.toUpperCase(), centerX, 530);
  ctx.fillStyle = option.messageColor;
  ctx.font = "40px light";
  ctx.textAlign = "center";
  ctx.fillText(option.message.toUpperCase(), centerX, 655);
  return canvas.toBuffer("image/png");
};

// src/themes/panorama.ts
import { createCanvas as createCanvas2, loadImage as loadImage2 } from "@napi-rs/canvas";
import { cropImage as cropImage2 } from "cropify";
registerFont("PlusJakartaSans-Bold.ttf", "bold");
registerFont("PlusJakartaSans-ExtraBold.ttf", "extrabold");
registerFont("PlusJakartaSans-ExtraLight.ttf", "extralight");
registerFont("PlusJakartaSans-Light.ttf", "light");
registerFont("PlusJakartaSans-Medium.ttf", "medium");
registerFont("PlusJakartaSans-Regular.ttf", "regular");
registerFont("PlusJakartaSans-SemiBold.ttf", "semibold");
var Panorama = async (option) => {
  if (!option.backgroundImage) {
    option.backgroundImage = "https://ik.imagekit.io/unburn/greetify-default.png";
  }
  if (!option.name)
    throw new Error("Invalid parameters: missing name paramter");
  if (!option.nameColor)
    option.nameColor = "#00FF9E";
  if (!option.type)
    option.type = "WELCOME";
  if (!option.typeColor)
    option.typeColor = "#FFFFFF";
  if (!option.circleBorder)
    option.circleBorder = false;
  if (option.name.length > 13) {
    option.name = option.name.slice(0, 13) + "..";
  }
  if (option.type.length > 15) {
    option.type = option.type.slice(0, 15) + "..";
  }
  const canvas = createCanvas2(1280, 410);
  const ctx = canvas.getContext("2d");
  const background = await cropImage2({
    imagePath: option.backgroundImage,
    borderRadius: 100,
    cropCenter: true,
    width: 1280,
    height: 410
  });
  ctx.drawImage(await loadImage2(background), 0, 0);
  const avatar = await cropImage2({
    imagePath: option.avatar,
    borderRadius: 100,
    circle: option.circleBorder ? true : false,
    cropCenter: true,
    width: 290,
    height: 290
  });
  const centerY = 410 / 2;
  ctx.drawImage(await loadImage2(avatar), 90, 60);
  ctx.fillStyle = option.nameColor;
  ctx.font = "80px extrabold";
  ctx.fillText(option.name.toUpperCase(), 420, centerY + 75);
  ctx.fillStyle = option.typeColor;
  ctx.font = "65px light";
  ctx.fillText(option.type.toUpperCase(), 420, centerY - 25);
  return canvas.toBuffer("image/png");
};
export {
  Minimal,
  Panorama
};
