"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/index.ts
var src_exports = {};
__export(src_exports, {
  cropImage: () => cropImage
});
module.exports = __toCommonJS(src_exports);
var import_canvas = require("@napi-rs/canvas");
var cropImage = (option) => __async(void 0, null, function* () {
  try {
    const image = yield (0, import_canvas.loadImage)(option.imagePath);
    if (!option.width)
      option.width = image.width;
    if (!option.height)
      option.height = image.height;
    const scaleWidth = option.width / image.width;
    const scaleHeight = option.height / image.height;
    const scaleFactor = Math.max(scaleWidth, scaleHeight);
    const scaledWidth = image.width * scaleFactor;
    const scaledHeight = image.height * scaleFactor;
    if (option.cropCenter) {
      option.x = (option.width - scaledWidth) / 2;
      option.y = (option.height - scaledHeight) / 2;
    } else {
      option.x -= (option.width - image.width * scaleFactor) / 2;
      option.y -= (option.height - image.height * scaleFactor) / 2;
    }
    const canvas = (0, import_canvas.createCanvas)(option.width, option.height);
    const ctx = canvas.getContext("2d");
    if (option.circle) {
      ctx.beginPath();
      ctx.arc(option.width / 2, option.height / 2, Math.min(option.width, option.height) / 2, 0, Math.PI * 2);
      ctx.closePath();
      ctx.clip();
    } else if (option.borderRadius > 0) {
      ctx.beginPath();
      ctx.moveTo(option.borderRadius, 0);
      ctx.lineTo(option.width - option.borderRadius, 0);
      ctx.quadraticCurveTo(option.width, 0, option.width, option.borderRadius);
      ctx.lineTo(option.width, option.height - option.borderRadius);
      ctx.quadraticCurveTo(option.width, option.height, option.width - option.borderRadius, option.height);
      ctx.lineTo(option.borderRadius, option.height);
      ctx.quadraticCurveTo(0, option.height, 0, option.height - option.borderRadius);
      ctx.lineTo(0, option.borderRadius);
      ctx.quadraticCurveTo(0, 0, option.borderRadius, 0);
      ctx.closePath();
      ctx.clip();
    }
    ctx.drawImage(image, option.x, option.y, scaledWidth, scaledHeight);
    return canvas.toBuffer("image/png");
  } catch (e) {
    throw new Error(e.message);
  }
});
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  cropImage
});
